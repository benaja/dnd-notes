// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   @db.Text
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  campaigns CampaignOnUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id        String   @id @default(cuid())
  title     String
  contentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       CampaignOnUser[]
  sessions    CampaignSessions[]
  characters  Character[]
  description Content            @relation(fields: [contentId], references: [id])
}

model CampaignOnUser {
  id         String   @id @default(cuid())
  userId     String
  campaignId String
  role       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([userId, campaignId])
}

model CampaignSessions {
  id         String   @id @default(cuid())
  campaignId String
  date       DateTime
  title      String
  contentId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaign    Campaign    @relation(fields: [campaignId], references: [id])
  caracters   Character[]
  description Content?    @relation(fields: [contentId], references: [id])
}

model Character {
  id          String   @id @default(cuid())
  campaignId  String
  name        String
  description String?  @db.Text
  type        String
  avatar      String?
  contentId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sessions CampaignSessions[]
  campaign Campaign           @relation(fields: [campaignId], references: [id])
  Content  Content?           @relation(fields: [contentId], references: [id])
}

model Inventory {
  id          String  @id @default(cuid())
  characterId String
  description String? @db.Text

  items Item[]
}

model Item {
  id          String   @id @default(cuid())
  inventoryId String
  name        String
  description String?  @db.Text
  quantity    Int      @default(1)
  value       Float?
  weight      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  inventory Inventory @relation(fields: [inventoryId], references: [id])
}

model Content {
  id        String   @id @default(cuid())
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  characters       Character[]
  Campaign         Campaign[]
  CampaignSessions CampaignSessions[]
}

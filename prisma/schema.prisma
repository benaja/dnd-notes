// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   @db.Text
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  campaigns CampaignOnUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id        String   @id @default(cuid())
  title     String
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      CampaignOnUser[]
  sessions   CampaignSessions[]
  characters Character[]
  quests     Quest[]
  pages      Page[]
}

model CampaignOnUser {
  id         String   @id @default(cuid())
  userId     String
  campaignId String
  role       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([userId, campaignId])
}

model CampaignSessions {
  id         String   @id @default(cuid())
  campaignId String
  date       DateTime
  title      String
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaign  Campaign    @relation(fields: [campaignId], references: [id])
  caracters Character[]
}

model Character {
  id          String  @id @default(cuid())
  campaignId  String
  name        String
  description String? @db.Text
  avatar      String?

  /// [CharacterType]
  type String

  /// [Fields]
  fields    Json     @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions CampaignSessions[]
  campaign Campaign           @relation(fields: [campaignId], references: [id])
  Quest    Quest[]
}

model Inventory {
  id          String  @id @default(cuid())
  characterId String
  description String? @db.Text

  items Item[]
}

model Item {
  id          String   @id @default(cuid())
  inventoryId String
  name        String
  description String?  @db.Text
  quantity    Int      @default(1)
  value       Float?
  weight      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  inventory Inventory @relation(fields: [inventoryId], references: [id])
}

model Mentions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sourceId String
  targetId String

  /// [MentionTypeField]
  type String @default("text")

  source Page @relation("source", fields: [sourceId], references: [id])
  target Page @relation("target", fields: [targetId], references: [id])
}

model Quest {
  id             String  @id @default(cuid())
  receivedFromId String?
  title          String

  /// [FieldsField]
  fields Json @default("[]")

  /// [QuestStatus]
  status     String   @default("open")
  campaignId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  receivedFrom Character? @relation(fields: [receivedFromId], references: [id])
  campaign     Campaign   @relation(fields: [campaignId], references: [id])
}

model Page {
  id    String @id @default(cuid())
  title String

  /// [FieldsField]
  fields Json @default("[]")

  /// [PreviewFieldsField]
  previewFields Json @default("[]")

  /// [PageTypeField]
  type       String
  campaignId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaign    Campaign   @relation(fields: [campaignId], references: [id])
  mentions    Mentions[] @relation("source")
  mentionedAt Mentions[] @relation("target")
}
